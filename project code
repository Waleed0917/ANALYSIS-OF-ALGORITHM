#include <iostream>
#include <vector>
#include <stack>
using namespace std;

// Global variables
const int MAX = 1000;
vector<int> graph[MAX];
bool onStack[MAX];
int ids[MAX], low[MAX];
stack<int> st;
int id = 0;
vector<vector<int>> SCCs;

// Depth-First Search function
void dfs(int at) {
    ids[at] = low[at] = id++; // Assign unique id
    st.push(at);
    onStack[at] = true;

    // Visit all neighbors
    for (int to : graph[at]) {
        if (ids[to] == -1) {
            dfs(to); // Visit unvisited node
            low[at] = min(low[at], low[to]);
        } else if (onStack[to]) {
            low[at] = min(low[at], ids[to]); // Update low-link
        }
    }

    // If node is a root node of SCC
    if (ids[at] == low[at]) {
        vector<int> scc;
        while (true) {
            int node = st.top();
            st.pop();
            onStack[node] = false;
            scc.push_back(node);
            if (node == at) break;
        }
        SCCs.push_back(scc); // Save SCC
    }
}

int main() {
    int n = 5; // Number of nodes (0 to 4)

    // Example graph:
    graph[0].push_back(1);
    graph[1].push_back(2);
    graph[2].push_back(0);
    graph[1].push_back(3);
    graph[3].push_back(4);

    // Initialize ids array to -1 (unvisited)
    for (int i = 0; i < n; ++i) {
        ids[i] = -1;
    }

    // Run DFS for all unvisited nodes
    for (int i = 0; i < n; ++i) {
        if (ids[i] == -1) {
            dfs(i);
        }
    }

    // Print all SCCs
    cout << "Strongly Connected Components:\n";
    for (auto& scc : SCCs) {
        for (int node : scc) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}
